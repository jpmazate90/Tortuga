//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------
package Analizadores;

import Logica.Acciones;
import Objetos.Instruccion;
import Objetos.Variable;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import javax.swing.JTextArea;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public parser() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\210\000\002\002\004\000\002\002\004\000\002\002"
        + "\004\000\002\002\004\000\002\002\004\000\002\002\004"
        + "\000\002\002\004\000\002\002\004\000\002\002\004\000"
        + "\002\002\004\000\002\002\004\000\002\002\004\000\002"
        + "\002\004\000\002\002\004\000\002\002\004\000\002\002"
        + "\004\000\002\002\004\000\002\002\004\000\002\002\004"
        + "\000\002\002\004\000\002\002\003\000\002\002\003\000"
        + "\002\002\003\000\002\002\003\000\002\002\003\000\002"
        + "\002\003\000\002\002\003\000\002\002\003\000\002\002"
        + "\003\000\002\002\003\000\002\002\003\000\002\002\003"
        + "\000\002\002\003\000\002\002\003\000\002\002\003\000"
        + "\002\002\003\000\002\002\003\000\002\002\003\000\002"
        + "\002\003\000\002\031\004\000\002\031\004\000\002\031"
        + "\004\000\002\031\004\000\002\031\004\000\002\031\004"
        + "\000\002\031\004\000\002\031\004\000\002\031\004\000"
        + "\002\031\004\000\002\031\004\000\002\031\004\000\002"
        + "\031\004\000\002\031\004\000\002\031\004\000\002\031"
        + "\004\000\002\031\004\000\002\031\004\000\002\031\004"
        + "\000\002\031\003\000\002\031\003\000\002\031\003\000"
        + "\002\031\003\000\002\031\003\000\002\031\003\000\002"
        + "\031\003\000\002\031\003\000\002\031\003\000\002\031"
        + "\003\000\002\031\003\000\002\031\003\000\002\031\003"
        + "\000\002\031\003\000\002\031\003\000\002\031\003\000"
        + "\002\031\003\000\002\031\003\000\002\031\003\000\002"
        + "\006\004\000\002\007\004\000\002\010\004\000\002\011"
        + "\004\000\002\012\003\000\002\013\003\000\002\014\003"
        + "\000\002\015\003\000\002\016\004\000\002\016\004\000"
        + "\002\017\006\000\002\020\004\000\002\021\004\000\002"
        + "\022\003\000\002\023\003\000\002\024\003\000\002\025"
        + "\003\000\002\026\007\000\002\032\004\000\002\033\004"
        + "\000\002\034\004\000\002\035\004\000\002\036\003\000"
        + "\002\037\003\000\002\040\003\000\002\041\003\000\002"
        + "\042\004\000\002\042\004\000\002\043\006\000\002\044"
        + "\004\000\002\045\004\000\002\046\003\000\002\047\003"
        + "\000\002\050\003\000\002\051\003\000\002\052\007\000"
        + "\002\053\003\000\002\053\005\000\002\027\003\000\002"
        + "\027\005\000\002\030\004\000\002\003\005\000\002\003"
        + "\005\000\002\003\003\000\002\004\005\000\002\004\005"
        + "\000\002\004\003\000\002\005\005\000\002\005\003\000"
        + "\002\005\003\000\002\055\005\000\002\055\005\000\002"
        + "\055\003\000\002\056\005\000\002\056\005\000\002\056"
        + "\003\000\002\057\005\000\002\057\003\000\002\057\003"
        + ""});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\265\000\050\005\043\006\020\007\013\010\047\011"
        + "\014\012\051\013\045\014\007\015\025\016\037\017\010"
        + "\020\035\021\034\022\005\023\044\024\027\025\006\026"
        + "\015\041\036\001\002\000\052\002\uffea\005\uffea\006\uffea"
        + "\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015"
        + "\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea"
        + "\024\uffea\025\uffea\026\uffea\041\uffea\001\002\000\052\002"
        + "\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7"
        + "\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021"
        + "\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\041\uffa7"
        + "\001\002\000\052\002\uffa4\005\uffa4\006\uffa4\007\uffa4\010"
        + "\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4"
        + "\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025"
        + "\uffa4\026\uffa4\041\uffa4\001\002\000\052\002\uffae\005\uffae"
        + "\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014"
        + "\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae"
        + "\023\uffae\024\uffae\025\uffae\026\uffae\041\uffae\001\002\000"
        + "\004\043\265\001\002\000\052\002\uffec\005\uffec\006\uffec"
        + "\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015"
        + "\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec"
        + "\024\uffec\025\uffec\026\uffec\041\uffec\001\002\000\052\002"
        + "\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0"
        + "\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021"
        + "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\041\uffe0"
        + "\001\002\000\010\033\104\041\102\043\101\001\002\000"
        + "\010\033\104\041\102\043\101\001\002\000\010\033\104"
        + "\041\102\043\101\001\002\000\052\002\uffe2\005\uffe2\006"
        + "\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2"
        + "\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023"
        + "\uffe2\024\uffe2\025\uffe2\026\uffe2\041\uffe2\001\002\000\052"
        + "\002\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012"
        + "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3"
        + "\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\041"
        + "\uffe3\001\002\000\010\033\104\041\102\043\101\001\002"
        + "\000\052\002\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011"
        + "\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb"
        + "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026"
        + "\uffeb\041\uffeb\001\002\000\052\002\uffe1\005\uffe1\006\uffe1"
        + "\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015"
        + "\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1"
        + "\024\uffe1\025\uffe1\026\uffe1\041\uffe1\001\002\000\052\002"
        + "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4"
        + "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021"
        + "\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\041\uffe4"
        + "\001\002\000\052\002\uffe9\005\uffe9\006\uffe9\007\uffe9\010"
        + "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9"
        + "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025"
        + "\uffe9\026\uffe9\041\uffe9\001\002\000\052\002\uffad\005\uffad"
        + "\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014"
        + "\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad"
        + "\023\uffad\024\uffad\025\uffad\026\uffad\041\uffad\001\002\000"
        + "\052\002\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6"
        + "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020"
        + "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6"
        + "\041\uffe6\001\002\000\052\002\uffa5\005\uffa5\006\uffa5\007"
        + "\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5"
        + "\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024"
        + "\uffa5\025\uffa5\026\uffa5\041\uffa5\001\002\000\052\002\uffde"
        + "\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013"
        + "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde"
        + "\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\041\uffde\001"
        + "\002\000\052\002\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7"
        + "\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017"
        + "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7"
        + "\026\uffe7\041\uffe7\001\002\000\052\002\uffe5\005\uffe5\006"
        + "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5"
        + "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023"
        + "\uffe5\024\uffe5\025\uffe5\026\uffe5\041\uffe5\001\002\000\052"
        + "\002\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012"
        + "\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd"
        + "\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\041"
        + "\uffdd\001\002\000\004\043\125\001\002\000\004\043\124"
        + "\001\002\000\054\002\uff8e\005\uff8e\006\uff8e\007\uff8e\010"
        + "\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e"
        + "\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025"
        + "\uff8e\026\uff8e\035\122\041\uff8e\001\002\000\006\004\120"
        + "\043\121\001\002\000\052\002\uffed\005\uffed\006\uffed\007"
        + "\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed"
        + "\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024"
        + "\uffed\025\uffed\026\uffed\041\uffed\001\002\000\052\002\uffe8"
        + "\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013"
        + "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8"
        + "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\041\uffe8\001"
        + "\002\000\052\002\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc"
        + "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017"
        + "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc"
        + "\026\uffdc\041\uffdc\001\002\000\004\042\117\001\002\000"
        + "\052\002\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6"
        + "\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020"
        + "\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6"
        + "\041\uffa6\001\002\000\052\002\uffaf\005\uffaf\006\uffaf\007"
        + "\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf"
        + "\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024"
        + "\uffaf\025\uffaf\026\uffaf\041\uffaf\001\002\000\052\002\uffdb"
        + "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013"
        + "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb"
        + "\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\041\uffdb\001"
        + "\002\000\010\033\104\041\102\043\101\001\002\000\052"
        + "\002\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012"
        + "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf"
        + "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\041"
        + "\uffdf\001\002\000\052\002\uffb0\005\uffb0\006\uffb0\007\uffb0"
        + "\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016"
        + "\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0"
        + "\025\uffb0\026\uffb0\041\uffb0\001\002\000\052\002\066\005"
        + "\043\006\020\007\013\010\047\011\014\012\051\013\045"
        + "\014\007\015\025\016\037\017\010\020\035\021\034\022"
        + "\005\023\044\024\027\025\006\026\015\041\036\001\002"
        + "\000\052\002\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011"
        + "\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd"
        + "\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026"
        + "\ufffd\041\ufffd\001\002\000\052\002\uffff\005\uffff\006\uffff"
        + "\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015"
        + "\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff"
        + "\024\uffff\025\uffff\026\uffff\041\uffff\001\002\000\052\002"
        + "\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3"
        + "\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021"
        + "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\041\ufff3"
        + "\001\002\000\052\002\ufff5\005\ufff5\006\ufff5\007\ufff5\010"
        + "\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5"
        + "\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025"
        + "\ufff5\026\ufff5\041\ufff5\001\002\000\052\002\ufff6\005\ufff6"
        + "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014"
        + "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6"
        + "\023\ufff6\024\ufff6\025\ufff6\026\ufff6\041\ufff6\001\002\000"
        + "\052\002\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe"
        + "\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020"
        + "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe"
        + "\041\ufffe\001\002\000\052\002\ufff4\005\ufff4\006\ufff4\007"
        + "\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4"
        + "\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024"
        + "\ufff4\025\ufff4\026\ufff4\041\ufff4\001\002\000\052\002\ufff7"
        + "\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013"
        + "\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7"
        + "\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\041\ufff7\001"
        + "\002\000\052\002\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc"
        + "\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017"
        + "\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc"
        + "\026\ufffc\041\ufffc\001\002\000\052\002\ufff9\005\ufff9\006"
        + "\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9"
        + "\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023"
        + "\ufff9\024\ufff9\025\ufff9\026\ufff9\041\ufff9\001\002\000\052"
        + "\002\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012"
        + "\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1"
        + "\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\041"
        + "\ufff1\001\002\000\004\002\001\001\002\000\052\002\ufffa"
        + "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013"
        + "\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa"
        + "\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\041\ufffa\001"
        + "\002\000\052\002\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8"
        + "\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017"
        + "\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8"
        + "\026\ufff8\041\ufff8\001\002\000\052\002\ufff0\005\ufff0\006"
        + "\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0"
        + "\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023"
        + "\ufff0\024\ufff0\025\ufff0\026\ufff0\041\ufff0\001\002\000\052"
        + "\002\000\005\000\006\000\007\000\010\000\011\000\012"
        + "\000\013\000\014\000\015\000\016\000\017\000\020\000"
        + "\021\000\022\000\023\000\024\000\025\000\026\000\041"
        + "\000\001\002\000\052\002\ufffb\005\ufffb\006\ufffb\007\ufffb"
        + "\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016"
        + "\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb"
        + "\025\ufffb\026\ufffb\041\ufffb\001\002\000\052\002\uffef\005"
        + "\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef"
        + "\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022"
        + "\uffef\023\uffef\024\uffef\025\uffef\026\uffef\041\uffef\001\002"
        + "\000\052\002\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011"
        + "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee"
        + "\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026"
        + "\uffee\041\uffee\001\002\000\052\002\ufff2\005\ufff2\006\ufff2"
        + "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015"
        + "\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2"
        + "\024\ufff2\025\ufff2\026\ufff2\041\ufff2\001\002\000\062\002"
        + "\uff89\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89\012\uff89"
        + "\013\uff89\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89\021"
        + "\uff89\022\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027\113"
        + "\030\114\034\uff89\036\uff89\041\uff89\001\002\000\052\002"
        + "\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2"
        + "\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021"
        + "\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\041\uffb2"
        + "\001\002\000\066\002\uff84\005\uff84\006\uff84\007\uff84\010"
        + "\uff84\011\uff84\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84"
        + "\017\uff84\020\uff84\021\uff84\022\uff84\023\uff84\024\uff84\025"
        + "\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84\034\uff84"
        + "\036\uff84\041\uff84\001\002\000\066\002\uff83\005\uff83\006"
        + "\uff83\007\uff83\010\uff83\011\uff83\012\uff83\013\uff83\014\uff83"
        + "\015\uff83\016\uff83\017\uff83\020\uff83\021\uff83\022\uff83\023"
        + "\uff83\024\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83"
        + "\032\uff83\034\uff83\036\uff83\041\uff83\001\002\000\066\002"
        + "\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011\uff86\012\uff86"
        + "\013\uff86\014\uff86\015\uff86\016\uff86\017\uff86\020\uff86\021"
        + "\uff86\022\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86"
        + "\030\uff86\031\107\032\110\034\uff86\036\uff86\041\uff86\001"
        + "\002\000\010\033\104\041\102\043\101\001\002\000\004"
        + "\034\106\001\002\000\066\002\uff85\005\uff85\006\uff85\007"
        + "\uff85\010\uff85\011\uff85\012\uff85\013\uff85\014\uff85\015\uff85"
        + "\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85\023\uff85\024"
        + "\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85"
        + "\034\uff85\036\uff85\041\uff85\001\002\000\010\033\104\041"
        + "\102\043\101\001\002\000\010\033\104\041\102\043\101"
        + "\001\002\000\062\002\uff87\005\uff87\006\uff87\007\uff87\010"
        + "\uff87\011\uff87\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87"
        + "\017\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025"
        + "\uff87\026\uff87\027\uff87\030\uff87\034\uff87\036\uff87\041\uff87"
        + "\001\002\000\062\002\uff88\005\uff88\006\uff88\007\uff88\010"
        + "\uff88\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88"
        + "\017\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025"
        + "\uff88\026\uff88\027\uff88\030\uff88\034\uff88\036\uff88\041\uff88"
        + "\001\002\000\010\033\104\041\102\043\101\001\002\000"
        + "\010\033\104\041\102\043\101\001\002\000\056\002\uff8b"
        + "\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013"
        + "\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b"
        + "\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\034\uff8b\036"
        + "\uff8b\041\uff8b\001\002\000\056\002\uff8a\005\uff8a\006\uff8a"
        + "\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015"
        + "\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a"
        + "\024\uff8a\025\uff8a\026\uff8a\034\uff8a\036\uff8a\041\uff8a\001"
        + "\002\000\054\002\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c"
        + "\011\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017"
        + "\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c"
        + "\026\uff8c\037\uff8c\041\uff8c\001\002\000\052\002\uffab\005"
        + "\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab"
        + "\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022"
        + "\uffab\023\uffab\024\uffab\025\uffab\026\uffab\041\uffab\001\002"
        + "\000\052\002\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011"
        + "\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac"
        + "\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026"
        + "\uffac\041\uffac\001\002\000\010\033\104\041\102\043\101"
        + "\001\002\000\052\002\uff8d\005\uff8d\006\uff8d\007\uff8d\010"
        + "\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d"
        + "\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025"
        + "\uff8d\026\uff8d\041\uff8d\001\002\000\052\002\uffa9\005\uffa9"
        + "\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014"
        + "\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9"
        + "\023\uffa9\024\uffa9\025\uffa9\026\uffa9\041\uffa9\001\002\000"
        + "\052\002\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8"
        + "\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020"
        + "\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8"
        + "\041\uffa8\001\002\000\052\002\uffb4\005\uffb4\006\uffb4\007"
        + "\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4"
        + "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024"
        + "\uffb4\025\uffb4\026\uffb4\041\uffb4\001\002\000\004\036\130"
        + "\001\002\000\046\006\144\007\135\010\174\011\137\012"
        + "\175\013\171\014\133\015\147\016\163\017\134\020\160"
        + "\021\157\022\131\023\170\024\152\025\132\026\141\041"
        + "\162\001\002\000\052\005\uff95\006\uff95\007\uff95\010\uff95"
        + "\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017"
        + "\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95"
        + "\026\uff95\037\uff95\041\uff95\001\002\000\052\005\uff92\006"
        + "\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92\014\uff92"
        + "\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023"
        + "\uff92\024\uff92\025\uff92\026\uff92\037\uff92\041\uff92\001\002"
        + "\000\052\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012"
        + "\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c"
        + "\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\037"
        + "\uff9c\041\uff9c\001\002\000\004\043\260\001\002\000\010"
        + "\033\204\041\202\043\200\001\002\000\052\005\uffb8\006"
        + "\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8"
        + "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023"
        + "\uffb8\024\uffb8\025\uffb8\026\uffb8\037\uffb8\041\uffb8\001\002"
        + "\000\010\033\204\041\202\043\200\001\002\000\052\005"
        + "\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf"
        + "\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022"
        + "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\037\uffbf\041\uffbf"
        + "\001\002\000\010\033\104\041\102\043\101\001\002\000"
        + "\052\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe"
        + "\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021"
        + "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\037\uffbe"
        + "\041\uffbe\001\002\000\052\005\uffba\006\uffba\007\uffba\010"
        + "\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba"
        + "\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025"
        + "\uffba\026\uffba\037\uffba\041\uffba\001\002\000\010\033\204"
        + "\041\202\043\200\001\002\000\052\005\uffc0\006\uffc0\007"
        + "\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0"
        + "\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024"
        + "\uffc0\025\uffc0\026\uffc0\037\uffc0\041\uffc0\001\002\000\052"
        + "\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013"
        + "\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7"
        + "\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\037\uffb7\041"
        + "\uffb7\001\002\000\052\005\uff9b\006\uff9b\007\uff9b\010\uff9b"
        + "\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017"
        + "\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b"
        + "\026\uff9b\037\uff9b\041\uff9b\001\002\000\052\005\uffc2\006"
        + "\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2"
        + "\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023"
        + "\uffc2\024\uffc2\025\uffc2\026\uffc2\037\uffc2\041\uffc2\001\002"
        + "\000\052\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012"
        + "\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6"
        + "\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\037"
        + "\uffc6\041\uffc6\001\002\000\052\005\uff93\006\uff93\007\uff93"
        + "\010\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016"
        + "\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93"
        + "\025\uff93\026\uff93\037\uff93\041\uff93\001\002\000\052\005"
        + "\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc"
        + "\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022"
        + "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\037\uffbc\041\uffbc"
        + "\001\002\000\052\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011"
        + "\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1"
        + "\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026"
        + "\uffc1\037\uffc1\041\uffc1\001\002\000\052\005\uffbb\006\uffbb"
        + "\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015"
        + "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb"
        + "\024\uffbb\025\uffbb\026\uffbb\037\uffbb\041\uffbb\001\002\000"
        + "\052\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3"
        + "\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021"
        + "\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\037\uffc3"
        + "\041\uffc3\001\002\000\004\043\250\001\002\000\004\043"
        + "\247\001\002\000\052\005\043\006\144\007\135\010\174"
        + "\011\137\012\175\013\171\014\133\015\147\016\163\017"
        + "\134\020\160\021\157\022\131\023\170\024\152\025\132"
        + "\026\141\037\224\041\162\001\002\000\054\005\uff90\006"
        + "\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\014\uff90"
        + "\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023"
        + "\uff90\024\uff90\025\uff90\026\uff90\035\221\037\uff90\041\uff90"
        + "\001\002\000\006\004\217\043\220\001\002\000\052\005"
        + "\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7"
        + "\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022"
        + "\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\037\uffc7\041\uffc7"
        + "\001\002\000\052\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011"
        + "\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6"
        + "\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026"
        + "\uffb6\037\uffb6\041\uffb6\001\002\000\052\005\uffbd\006\uffbd"
        + "\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015"
        + "\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd"
        + "\024\uffbd\025\uffbd\026\uffbd\037\uffbd\041\uffbd\001\002\000"
        + "\052\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5"
        + "\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021"
        + "\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\037\uffb5"
        + "\041\uffb5\001\002\000\052\005\uff94\006\uff94\007\uff94\010"
        + "\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94"
        + "\017\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025"
        + "\uff94\026\uff94\037\uff94\041\uff94\001\002\000\052\005\uff9d"
        + "\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014"
        + "\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d"
        + "\023\uff9d\024\uff9d\025\uff9d\026\uff9d\037\uff9d\041\uff9d\001"
        + "\002\000\052\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4"
        + "\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020"
        + "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4"
        + "\037\uffc4\041\uffc4\001\002\000\052\005\uffc5\006\uffc5\007"
        + "\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5"
        + "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024"
        + "\uffc5\025\uffc5\026\uffc5\037\uffc5\041\uffc5\001\002\000\010"
        + "\033\204\041\202\043\200\001\002\000\052\005\uff9e\006"
        + "\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e"
        + "\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023"
        + "\uff9e\024\uff9e\025\uff9e\026\uff9e\037\uff9e\041\uff9e\001\002"
        + "\000\052\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012"
        + "\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9"
        + "\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\037"
        + "\uffb9\041\uffb9\001\002\000\064\005\uff7d\006\uff7d\007\uff7d"
        + "\010\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d\016"
        + "\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d"
        + "\025\uff7d\026\uff7d\027\uff7d\030\uff7d\031\213\032\214\034"
        + "\uff7d\037\uff7d\041\uff7d\001\002\000\064\005\uff7b\006\uff7b"
        + "\007\uff7b\010\uff7b\011\uff7b\012\uff7b\013\uff7b\014\uff7b\015"
        + "\uff7b\016\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b\023\uff7b"
        + "\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b\032"
        + "\uff7b\034\uff7b\037\uff7b\041\uff7b\001\002\000\052\005\uffa0"
        + "\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014"
        + "\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0"
        + "\023\uffa0\024\uffa0\025\uffa0\026\uffa0\037\uffa0\041\uffa0\001"
        + "\002\000\064\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a"
        + "\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a\017\uff7a\020"
        + "\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a"
        + "\027\uff7a\030\uff7a\031\uff7a\032\uff7a\034\uff7a\037\uff7a\041"
        + "\uff7a\001\002\000\060\005\uff80\006\uff80\007\uff80\010\uff80"
        + "\011\uff80\012\uff80\013\uff80\014\uff80\015\uff80\016\uff80\017"
        + "\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80\025\uff80"
        + "\026\uff80\027\207\030\210\034\uff80\037\uff80\041\uff80\001"
        + "\002\000\010\033\204\041\202\043\200\001\002\000\004"
        + "\034\206\001\002\000\064\005\uff7c\006\uff7c\007\uff7c\010"
        + "\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c\015\uff7c\016\uff7c"
        + "\017\uff7c\020\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c\025"
        + "\uff7c\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\034\uff7c"
        + "\037\uff7c\041\uff7c\001\002\000\010\033\204\041\202\043"
        + "\200\001\002\000\010\033\204\041\202\043\200\001\002"
        + "\000\054\005\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012"
        + "\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017\uff82\020\uff82"
        + "\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82\026\uff82\034"
        + "\uff82\037\uff82\041\uff82\001\002\000\054\005\uff81\006\uff81"
        + "\007\uff81\010\uff81\011\uff81\012\uff81\013\uff81\014\uff81\015"
        + "\uff81\016\uff81\017\uff81\020\uff81\021\uff81\022\uff81\023\uff81"
        + "\024\uff81\025\uff81\026\uff81\034\uff81\037\uff81\041\uff81\001"
        + "\002\000\010\033\204\041\202\043\200\001\002\000\010"
        + "\033\204\041\202\043\200\001\002\000\060\005\uff7e\006"
        + "\uff7e\007\uff7e\010\uff7e\011\uff7e\012\uff7e\013\uff7e\014\uff7e"
        + "\015\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e\022\uff7e\023"
        + "\uff7e\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e\034\uff7e"
        + "\037\uff7e\041\uff7e\001\002\000\060\005\uff7f\006\uff7f\007"
        + "\uff7f\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f"
        + "\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\024"
        + "\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\034\uff7f\037\uff7f"
        + "\041\uff7f\001\002\000\052\005\uff99\006\uff99\007\uff99\010"
        + "\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99"
        + "\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025"
        + "\uff99\026\uff99\037\uff99\041\uff99\001\002\000\052\005\uff9a"
        + "\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014"
        + "\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a"
        + "\023\uff9a\024\uff9a\025\uff9a\026\uff9a\037\uff9a\041\uff9a\001"
        + "\002\000\010\033\204\041\202\043\200\001\002\000\052"
        + "\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013"
        + "\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f"
        + "\022\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\037\uff8f\041"
        + "\uff8f\001\002\000\052\005\uffcb\006\uffcb\007\uffcb\010\uffcb"
        + "\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017"
        + "\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb"
        + "\026\uffcb\037\uffcb\041\uffcb\001\002\000\052\002\uffa3\005"
        + "\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3"
        + "\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022"
        + "\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\041\uffa3\001\002"
        + "\000\052\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012"
        + "\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2"
        + "\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\037"
        + "\uffd2\041\uffd2\001\002\000\052\005\uffd1\006\uffd1\007\uffd1"
        + "\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016"
        + "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1"
        + "\025\uffd1\026\uffd1\037\uffd1\041\uffd1\001\002\000\052\005"
        + "\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd"
        + "\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022"
        + "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\037\uffcd\041\uffcd"
        + "\001\002\000\052\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011"
        + "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3"
        + "\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026"
        + "\uffd3\037\uffd3\041\uffd3\001\002\000\052\005\uffca\006\uffca"
        + "\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015"
        + "\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca"
        + "\024\uffca\025\uffca\026\uffca\037\uffca\041\uffca\001\002\000"
        + "\052\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5"
        + "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021"
        + "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\037\uffd5"
        + "\041\uffd5\001\002\000\052\005\uffd9\006\uffd9\007\uffd9\010"
        + "\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9"
        + "\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025"
        + "\uffd9\026\uffd9\037\uffd9\041\uffd9\001\002\000\052\005\uffcf"
        + "\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014"
        + "\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf"
        + "\023\uffcf\024\uffcf\025\uffcf\026\uffcf\037\uffcf\041\uffcf\001"
        + "\002\000\052\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4"
        + "\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020"
        + "\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4"
        + "\037\uffd4\041\uffd4\001\002\000\052\005\uffce\006\uffce\007"
        + "\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce"
        + "\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024"
        + "\uffce\025\uffce\026\uffce\037\uffce\041\uffce\001\002\000\052"
        + "\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013"
        + "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6"
        + "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\037\uffd6\041"
        + "\uffd6\001\002\000\052\005\uffda\006\uffda\007\uffda\010\uffda"
        + "\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017"
        + "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda"
        + "\026\uffda\037\uffda\041\uffda\001\002\000\052\005\uffc9\006"
        + "\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9"
        + "\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023"
        + "\uffc9\024\uffc9\025\uffc9\026\uffc9\037\uffc9\041\uffc9\001\002"
        + "\000\052\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012"
        + "\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0"
        + "\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\037"
        + "\uffd0\041\uffd0\001\002\000\052\005\uffd7\006\uffd7\007\uffd7"
        + "\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016"
        + "\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7"
        + "\025\uffd7\026\uffd7\037\uffd7\041\uffd7\001\002\000\052\005"
        + "\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8"
        + "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022"
        + "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\037\uffd8\041\uffd8"
        + "\001\002\000\052\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011"
        + "\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8"
        + "\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026"
        + "\uffc8\037\uffc8\041\uffc8\001\002\000\052\005\uffcc\006\uffcc"
        + "\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015"
        + "\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc"
        + "\024\uffcc\025\uffcc\026\uffcc\037\uffcc\041\uffcc\001\002\000"
        + "\052\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97"
        + "\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021"
        + "\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\037\uff97"
        + "\041\uff97\001\002\000\052\005\uff96\006\uff96\007\uff96\010"
        + "\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96"
        + "\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025"
        + "\uff96\026\uff96\037\uff96\041\uff96\001\002\000\052\005\uffa2"
        + "\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014"
        + "\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2"
        + "\023\uffa2\024\uffa2\025\uffa2\026\uffa2\037\uffa2\041\uffa2\001"
        + "\002\000\004\036\253\001\002\000\046\006\144\007\135"
        + "\010\174\011\137\012\175\013\171\014\133\015\147\016"
        + "\163\017\134\020\160\021\157\022\131\023\170\024\152"
        + "\025\132\026\141\041\162\001\002\000\052\005\043\006"
        + "\144\007\135\010\174\011\137\012\175\013\171\014\133"
        + "\015\147\016\163\017\134\020\160\021\157\022\131\023"
        + "\170\024\152\025\132\026\141\037\255\041\162\001\002"
        + "\000\052\005\uff91\006\uff91\007\uff91\010\uff91\011\uff91\012"
        + "\uff91\013\uff91\014\uff91\015\uff91\016\uff91\017\uff91\020\uff91"
        + "\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91\037"
        + "\uff91\041\uff91\001\002\000\052\005\uff9f\006\uff9f\007\uff9f"
        + "\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016"
        + "\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f"
        + "\025\uff9f\026\uff9f\037\uff9f\041\uff9f\001\002\000\052\005"
        + "\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1"
        + "\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022"
        + "\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\037\uffa1\041\uffa1"
        + "\001\002\000\004\040\261\001\002\000\004\043\262\001"
        + "\002\000\052\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98"
        + "\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020"
        + "\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98"
        + "\037\uff98\041\uff98\001\002\000\052\002\uffb1\005\uffb1\006"
        + "\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1"
        + "\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023"
        + "\uffb1\024\uffb1\025\uffb1\026\uffb1\041\uffb1\001\002\000\052"
        + "\002\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012"
        + "\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3"
        + "\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\041"
        + "\uffb3\001\002\000\004\040\266\001\002\000\004\043\267"
        + "\001\002\000\052\002\uffaa\005\uffaa\006\uffaa\007\uffaa\010"
        + "\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa"
        + "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025"
        + "\uffaa\026\uffaa\041\uffaa\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\265\000\052\002\051\006\037\007\010\010\020\011"
        + "\003\012\023\013\040\014\030\015\025\016\031\017\022"
        + "\020\016\021\015\022\021\023\011\024\047\025\027\026"
        + "\032\027\041\030\045\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\010\003\263"
        + "\004\076\005\102\001\001\000\010\003\262\004\076\005"
        + "\102\001\001\000\010\003\126\004\076\005\102\001\001"
        + "\000\002\001\001\000\002\001\001\000\010\003\125\004"
        + "\076\005\102\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\010\003\077\004\076\005\102\001\001\000"
        + "\002\001\001\000\002\001\001\000\050\006\071\007\053"
        + "\010\057\011\052\012\062\013\072\014\066\015\063\016"
        + "\067\017\061\020\056\021\055\022\060\023\054\024\075"
        + "\025\064\026\070\027\073\030\074\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\010\003\104\004\076\005"
        + "\102\001\001\000\002\001\001\000\002\001\001\000\006"
        + "\004\111\005\102\001\001\000\006\004\110\005\102\001"
        + "\001\000\002\001\001\000\002\001\001\000\010\003\115"
        + "\004\076\005\102\001\001\000\010\003\114\004\076\005"
        + "\102\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\010\003"
        + "\122\004\076\005\102\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\052\031\160\032\163\033\150\034\172\035\171"
        + "\036\155\037\147\040\153\041\144\042\137\043\141\044"
        + "\165\045\152\046\154\047\142\050\175\051\135\052\145"
        + "\053\164\054\166\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\010\055\256"
        + "\056\202\057\176\001\001\000\002\001\001\000\010\055"
        + "\255\056\202\057\176\001\001\000\002\001\001\000\010"
        + "\003\251\004\076\005\102\001\001\000\002\001\001\000"
        + "\002\001\001\000\010\055\250\056\202\057\176\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\050\030\244"
        + "\032\237\033\232\034\243\035\242\036\236\037\231\040"
        + "\234\041\227\042\224\043\225\044\241\045\233\046\235"
        + "\047\226\050\245\051\222\052\230\053\240\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\010\055\200\056\202\057\176\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\010\055\204\056\202\057\176\001\001\000\002\001\001"
        + "\000\002\001\001\000\010\055\211\056\202\057\176\001"
        + "\001\000\010\055\210\056\202\057\176\001\001\000\002"
        + "\001\001\000\002\001\001\000\006\056\215\057\176\001"
        + "\001\000\006\056\214\057\176\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\010\055\221\056\202\057\176\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\052\031\253\032\163\033\150"
        + "\034\172\035\171\036\155\037\147\040\153\041\144\042"
        + "\137\043\141\044\165\045\152\046\154\047\142\050\175"
        + "\051\135\052\145\053\164\054\166\001\001\000\050\030"
        + "\244\032\237\033\232\034\243\035\242\036\236\037\231"
        + "\040\234\041\227\042\224\043\225\044\241\045\233\046"
        + "\235\047\226\050\245\051\222\052\230\053\240\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$parser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$parser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    // Connect this parser to a scanner!
    JTextArea area;
    int valor = 0;
    Acciones acciones;

    public parser(AnalizadorLexico1 lex, JTextArea area) {
        super(lex);
        this.area = area;
        acciones = new Acciones();
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("OCURRIO UN ERROR SINTACTICO, FILA: " + cur_token.left + ", COLUMNA: " + cur_token.right + " TOKEN:" + cur_token);
        area.append("\nNO ESTA BIEN ESCRITO ALGO EN FILA: " + cur_token.left + ", COLUMNA: " + cur_token.right);
        if (Acciones.error == false) {
            acciones.ejecutarOrdenes();
        }
        Acciones.instrucciones.clear();
        Acciones.error = true;
    }

    String lexema = "";
    String lexemaGlobal = "";

    public void crearLexema(String lexema, String mandar) {
        if (lexema.equals("")) {
            lexema = mandar + " ";
        } else {
            lexema = lexema + " " + mandar + " ";
        }
        Acciones.repeats.set(Acciones.repeats.size() - 1, lexema);

    }

    public void crearLexemaGlobal(String mandar) {
        if (lexemaGlobal.equals("")) {
            lexemaGlobal = mandar + " ";
        } else {
            lexemaGlobal = lexemaGlobal + " " + mandar + " ";
        }
    }

    String expresion = "";

    public void crearLexemaExpresion(String mandar) {
        if (lexemaGlobal.equals("")) {
            expresion = mandar + " ";
        } else {
            expresion = expresion + " " + mandar + " ";
        }
    }

    public void crearInstruccion(String lexema, String valor) {
        Instruccion instruccion;
        instruccion = new Instruccion(lexema, valor);
        Acciones.instrucciones.add(instruccion);
    }

    public void agregarVariableAsignacion(String nombre, int valor) {
        Variable variable;
        variable = new Variable(nombre, Integer.toString(valor));
        Acciones.agregarVariableAsignacion(variable);
    }

    public void agregarVariable(String nombre) {
        Variable variable;
        variable = new Variable(nombre);
        boolean pudo = Acciones.agregarVariable(variable);
        if (pudo == false) {
            System.out.println("NO SE PUDO AGREGAR LA VARIABLE" + nombre + "YA EXISTE UNA IGUAL");

            area.append("\nNO SE PUDO AGREGAR LA VARIABLE" + nombre + "YA EXISTE UNA IGUAL");
            if (Acciones.error == false) {
                acciones.ejecutarOrdenes();
            }
            Acciones.instrucciones.clear();
            Acciones.error = true;

        }
    }

    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$parser$actions {

        private final parser parser;

        /**
         * Constructor
         */
        CUP$parser$actions(parser parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
                int CUP$parser$act_num,
                java_cup.runtime.lr_parser CUP$parser$parser,
                java.util.Stack CUP$parser$stack,
                int CUP$parser$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

            /* select the action based on the action number */
            switch (CUP$parser$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= estructura_definitiva EOF 
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                    Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    RESULT = start_val;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$parser$parser.done_parsing();
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // estructura_definitiva ::= estructura_definitiva forward 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // estructura_definitiva ::= estructura_definitiva backward 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // estructura_definitiva ::= estructura_definitiva rightt 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // estructura_definitiva ::= estructura_definitiva leftt 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // estructura_definitiva ::= estructura_definitiva clears 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // estructura_definitiva ::= estructura_definitiva penup 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // estructura_definitiva ::= estructura_definitiva pendown 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // estructura_definitiva ::= estructura_definitiva tocenter 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // estructura_definitiva ::= estructura_definitiva color 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // estructura_definitiva ::= estructura_definitiva positionxy 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // estructura_definitiva ::= estructura_definitiva positionx 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // estructura_definitiva ::= estructura_definitiva positiony 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // estructura_definitiva ::= estructura_definitiva hideturtle 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // estructura_definitiva ::= estructura_definitiva showturtle 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // estructura_definitiva ::= estructura_definitiva toerase 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // estructura_definitiva ::= estructura_definitiva todraw 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // estructura_definitiva ::= estructura_definitiva repeat 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // estructura_definitiva ::= estructura_definitiva variable 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // estructura_definitiva ::= estructura_definitiva comentario 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // estructura_definitiva ::= forward 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // estructura_definitiva ::= backward 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // estructura_definitiva ::= rightt 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // estructura_definitiva ::= leftt 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // estructura_definitiva ::= clears 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // estructura_definitiva ::= penup 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // estructura_definitiva ::= pendown 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // estructura_definitiva ::= tocenter 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // estructura_definitiva ::= color 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // estructura_definitiva ::= positionxy 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // estructura_definitiva ::= positionx 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // estructura_definitiva ::= positiony 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // estructura_definitiva ::= hideturtle 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // estructura_definitiva ::= showturtle 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // estructura_definitiva ::= toerase 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // estructura_definitiva ::= todraw 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // estructura_definitiva ::= repeat 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // estructura_definitiva ::= variable 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // estructura_definitiva ::= comentario 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_definitiva", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // estructura2 ::= estructura2 forwardP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // estructura2 ::= estructura2 backwardP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // estructura2 ::= estructura2 righttP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // estructura2 ::= estructura2 lefttP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // estructura2 ::= estructura2 clearsP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // estructura2 ::= estructura2 penupP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // estructura2 ::= estructura2 pendownP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // estructura2 ::= estructura2 tocenterP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // estructura2 ::= estructura2 colorP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // estructura2 ::= estructura2 positionxyP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // estructura2 ::= estructura2 positionxP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // estructura2 ::= estructura2 positionyP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // estructura2 ::= estructura2 hideturtleP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // estructura2 ::= estructura2 showturtleP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 53: // estructura2 ::= estructura2 toeraseP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 54: // estructura2 ::= estructura2 todrawP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 55: // estructura2 ::= estructura2 repeatP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 56: // estructura2 ::= estructura2 variableP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 57: // estructura2 ::= estructura2 comentario 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 58: // estructura2 ::= forwardP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 59: // estructura2 ::= backwardP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 60: // estructura2 ::= righttP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 61: // estructura2 ::= lefttP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 62: // estructura2 ::= clearsP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 63: // estructura2 ::= penupP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 64: // estructura2 ::= pendownP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 65: // estructura2 ::= tocenterP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 66: // estructura2 ::= colorP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 67: // estructura2 ::= positionxyP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 68: // estructura2 ::= positionxP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 69: // estructura2 ::= positionyP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 70: // estructura2 ::= hideturtleP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 71: // estructura2 ::= showturtleP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 72: // estructura2 ::= toeraseP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 73: // estructura2 ::= todrawP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 74: // estructura2 ::= repeatP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 75: // estructura2 ::= variableP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 76: // estructura2 ::= comentarioP 
                {
                    Object RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura2", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 77: // forward ::= FORWARD s 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearInstruccion("fd", e1.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("forward", 4, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 78: // backward ::= BACKWARD s 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearInstruccion("bk", e1.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("backward", 5, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 79: // rightt ::= RIGHTT s 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearInstruccion("rt", e1.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("rightt", 6, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 80: // leftt ::= LEFTT s 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearInstruccion("lt", e1.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("leftt", 7, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 81: // clears ::= CLEARS 
                {
                    Object RESULT = null;
                    crearInstruccion("cs", null);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("clears", 8, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 82: // penup ::= PENUP 
                {
                    Object RESULT = null;
                    crearInstruccion("pu", null);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("penup", 9, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 83: // pendown ::= PENDOWN 
                {
                    Object RESULT = null;
                    crearInstruccion("pd", null);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("pendown", 10, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 84: // tocenter ::= TOCENTER 
                {
                    Object RESULT = null;
                    crearInstruccion("cr", null);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("tocenter", 11, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 85: // color ::= COLOR NUMEROS 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearInstruccion("color", e1.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("color", 12, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 86: // color ::= COLOR HEXADECIMAL 
                {
                    Object RESULT = null;
                    int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearInstruccion("color", e2.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("color", 12, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 87: // positionxy ::= POSITIONXY NUMEROS COMA NUMEROS 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearInstruccion("posxy", e1.toString() + "," + e2.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("positionxy", 13, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 88: // positionx ::= POSITIONX NUMEROS 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearInstruccion("posx", e1.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("positionx", 14, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 89: // positiony ::= POSITIONY NUMEROS 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearInstruccion("posy", e1.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("positiony", 15, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 90: // hideturtle ::= HIDETURTLE 
                {
                    Object RESULT = null;
                    crearInstruccion("ht", null);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("hideturtle", 16, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 91: // showturtle ::= SHOWTURTLE 
                {
                    Object RESULT = null;
                    crearInstruccion("st", null);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("showturtle", 17, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 92: // toerase ::= TOERASE 
                {
                    Object RESULT = null;
                    crearInstruccion("te", null);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("toerase", 18, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 93: // todraw ::= TODRAW 
                {
                    Object RESULT = null;
                    crearInstruccion("td", null);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("todraw", 19, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 94: // repeat ::= REPEAT s CORCHETE_ABIERTO estructura2 CORCHETE_CERRADO 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;

                    String ultimo = Acciones.ultimoLexema();
                    int a = Acciones.repeats.size();
                    int e = Integer.parseInt(e1.toString());
                    if (a == 1) {
                        if (e > 1) {
                            for (int i = 0; i < e - 1; i++) {
                                crearLexema(Acciones.ultimoLexema(), ultimo);
                            }
                            Acciones.generarParse(Acciones.ultimoLexema());
                        } else {
                            Acciones.generarParse(Acciones.ultimoLexema());
                        }

                    } else {
                        System.out.println("error con repeats");
                    }

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 95: // forwardP ::= FORWARD sP 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearLexema(Acciones.ultimoLexema(), "FORWARD " + e1);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("forwardP", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 96: // backwardP ::= BACKWARD sP 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearLexema(Acciones.ultimoLexema(), "BACKWARD " + e1);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("backwardP", 25, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 97: // righttP ::= RIGHTT sP 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearLexema(Acciones.ultimoLexema(), "rt " + e1);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("righttP", 26, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 98: // lefttP ::= LEFTT sP 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearLexema(Acciones.ultimoLexema(), "lt " + e1);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("lefttP", 27, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 99: // clearsP ::= CLEARS 
                {
                    Object RESULT = null;
                    crearLexema(Acciones.ultimoLexema(), "CLEARS");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("clearsP", 28, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 100: // penupP ::= PENUP 
                {
                    Object RESULT = null;
                    crearLexema(Acciones.ultimoLexema(), "PENUP");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("penupP", 29, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 101: // pendownP ::= PENDOWN 
                {
                    Object RESULT = null;
                    crearLexema(Acciones.ultimoLexema(), "PENDOWN");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("pendownP", 30, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 102: // tocenterP ::= TOCENTER 
                {
                    Object RESULT = null;
                    crearLexema(Acciones.ultimoLexema(), "TOCENTER");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("tocenterP", 31, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 103: // colorP ::= COLOR NUMEROS 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearLexema(Acciones.ultimoLexema(), "COLOR" + e1);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("colorP", 32, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 104: // colorP ::= COLOR HEXADECIMAL 
                {
                    Object RESULT = null;
                    int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearLexema(Acciones.ultimoLexema(), "COLOR " + e2);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("colorP", 32, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 105: // positionxyP ::= POSITIONXY NUMEROS COMA NUMEROS 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearLexema(Acciones.ultimoLexema(), "POSITIONXY " + e1 + "," + e2);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("positionxyP", 33, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 106: // positionxP ::= POSITIONX NUMEROS 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearLexema(Acciones.ultimoLexema(), "POSITIONX " + e1);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("positionxP", 34, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 107: // positionyP ::= POSITIONY NUMEROS 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearLexema(Acciones.ultimoLexema(), "POSITIONY " + e1);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("positionyP", 35, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 108: // hideturtleP ::= HIDETURTLE 
                {
                    Object RESULT = null;
                    crearLexema(Acciones.ultimoLexema(), "HIDETURTLE");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("hideturtleP", 36, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 109: // showturtleP ::= SHOWTURTLE 
                {
                    Object RESULT = null;
                    crearLexema(Acciones.ultimoLexema(), "SHOWTURTLE");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("showturtleP", 37, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 110: // toeraseP ::= TOERASE 
                {
                    Object RESULT = null;
                    crearLexema(Acciones.ultimoLexema(), "TOERASE");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("toeraseP", 38, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 111: // todrawP ::= TODRAW 
                {
                    Object RESULT = null;
                    crearLexema(Acciones.ultimoLexema(), "TODRAW");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("todrawP", 39, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 112: // repeatP ::= REPEAT s CORCHETE_ABIERTO estructura2 CORCHETE_CERRADO 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;

                    String ultimo = Acciones.ultimoLexema();
                    int e = Integer.parseInt(e1.toString());
                    if (e > 1) {
                        for (int i = 0; i < e - 1; i++) {

                            crearLexema(Acciones.ultimoLexema(), ultimo);
                        }

                        Acciones.unirLexemas();
                    } else {
                        Acciones.unirLexemas();
                    }

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("repeatP", 40, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 113: // variableP ::= IDD 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearLexema(Acciones.ultimoLexema(), e1);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("variableP", 41, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 114: // variableP ::= IDD IGUAL sP 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    crearLexema(Acciones.ultimoLexema(), e1 + " = " + e2);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("variableP", 41, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 115: // variable ::= IDD 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    agregarVariable(e1);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("variable", 21, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 116: // variable ::= IDD IGUAL s 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    agregarVariableAsignacion(e1, valor);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("variable", 21, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 117: // comentario ::= NUMERAL COMENTARIO 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    System.out.println("SE ENCONTRO UN COMENTARIO: " + e1);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("comentario", 22, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 118: // s ::= t SUMA s 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = Integer.parseInt(e1.toString()) + Integer.parseInt(e2.toString());
                    valor = Integer.parseInt(RESULT.toString());;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("s", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 119: // s ::= t GUION s 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = Integer.parseInt(e1.toString()) - Integer.parseInt(e2.toString());
                    valor = Integer.parseInt(RESULT.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("s", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 120: // s ::= t 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = Integer.parseInt(e1.toString());
                    valor = Integer.parseInt(RESULT.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("s", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 121: // t ::= f MULTIPLICACION t 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = Integer.parseInt(e1.toString()) * Integer.parseInt(e2.toString());
                    valor = Integer.parseInt(RESULT.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("t", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 122: // t ::= f DIVISION t 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = Integer.parseInt(e1.toString()) / Integer.parseInt(e2.toString());
                    valor = Integer.parseInt(RESULT.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("t", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 123: // t ::= f 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = Integer.parseInt(e1.toString());
                    valor = Integer.parseInt(RESULT.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("t", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 124: // f ::= PARENTESIS_ABIERTO s PARENTESIS_CERRADO 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    RESULT = Integer.parseInt(e1.toString());
                    valor = Integer.parseInt(RESULT.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("f", 3, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 125: // f ::= NUMEROS 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = Integer.parseInt(e1.toString());
                    valor = Integer.parseInt(RESULT.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("f", 3, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 126: // f ::= IDD 
                {
                    Object RESULT = null;
                    int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    boolean existe = Acciones.existeId(e2);
                    if (existe == true) {
                        Integer lexema = Acciones.valorId(e2);
                        if (lexema != null) {
                            RESULT = lexema;
                        } else {
                            System.out.println("NO TIENE UN VALOR EL ID: " + e2);
                            area.append("\nEL ID: " + e2 + " NO TIENE VALOR");
                            if (Acciones.error == false) {
                                acciones.ejecutarOrdenes();
                            }
                            Acciones.instrucciones.clear();
                            Acciones.error = true;

                        }

                    } else {
                        System.out.println("NO SE ENCUENTRA EL ID: " + e2);
                        area.append("\nNO SE ENCUENTRA EL ID: " + e2);
                        if (Acciones.error == false) {
                            acciones.ejecutarOrdenes();
                        }
                        Acciones.instrucciones.clear();
                        Acciones.error = true;

                    }
                    valor = Integer.parseInt(RESULT.toString());

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("f", 3, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 127: // sP ::= tP SUMA sP 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e1.toString() + " + " + e2.toString();
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("sP", 43, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 128: // sP ::= tP GUION sP 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e1.toString() + " - " + e2.toString();
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("sP", 43, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 129: // sP ::= tP 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e1.toString();
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("sP", 43, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 130: // tP ::= fP MULTIPLICACION tP 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e1.toString() + " * " + e2.toString();
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("tP", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 131: // tP ::= fP DIVISION tP 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e1.toString() + " / " + e2.toString();
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("tP", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 132: // tP ::= fP 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e1.toString();
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("tP", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 133: // fP ::= PARENTESIS_ABIERTO sP PARENTESIS_CERRADO 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    RESULT = " ( " + e1.toString() + " ) ";
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("fP", 45, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 134: // fP ::= NUMEROS 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e1;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("fP", 45, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 135: // fP ::= IDD 
                {
                    Object RESULT = null;
                    int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e2;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("fP", 45, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$parser$act_num + "found in internal parse table");

            }
        }

        /* end of method */
        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$parser$do_action(
                int CUP$parser$act_num,
                java_cup.runtime.lr_parser CUP$parser$parser,
                java.util.Stack CUP$parser$stack,
                int CUP$parser$top)
                throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                    CUP$parser$act_num,
                    CUP$parser$parser,
                    CUP$parser$stack,
                    CUP$parser$top);
        }
    }

}
